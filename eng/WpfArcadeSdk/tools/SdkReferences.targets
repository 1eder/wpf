<Project>
  <ItemGroup>
    <PackageReference Include="$(MicrosoftPrivateWinformsPackage)"
                      Version="$(MicrosoftPrivateWinformsVersion)"
                      ExcludeAssets="All"
                      GeneratePathProperty="True"
                      Condition="'$(MSBuildProjectExtension)'!='.vcxproj' And $(TargetFramework.StartsWith('netcoreapp3')) And '$(NoAutoMicrosoftPrivateWinformsReference)'!='true'"/>
  </ItemGroup>
  
  <Target
    Name="LimitNetCoreAppReferences"
    AfterTargets="ResolveAssemblyReferences"
    Returns="@(ReferencePath)"
    Condition="'@(NetCoreReference)'!='' and '@(ReferencePath)' != ''">


    <!-- 
      Example
      <NetCoreReference Include="Microsoft.CSharp" /> 
    -->

    <!-- Save Microsoft.NETCore.App assemblies, and remove those from @(ReferencePath) -->
    <ItemGroup>
      <_netCoreAppSdkReference Remove="@(_netCoreAppSdkReference)" />
      <_netCoreAppSdkReference Include="@(ReferencePath)" Condition="'%(ReferencePath.NuGetPackageId)'=='Microsoft.NETCore.App'"/>
      
      <ReferencePath Remove="@(_netCoreAppSdkReference)" />
    </ItemGroup>
    
    <!-- Transform _netCoreAppSdkReference's Identity to its FileName. This will help us do a Remove against @(NetCoreReference) directly -->
    <ItemGroup>
      <_netCoreAppSdkUnwantedRefNormalized Remove="@(_netCoreAppSdkUnwantedRefNormalized)" />
      <_netCoreAppSdkUnwantedRefNormalized Include="@(_netCoreAppSdkReference->'%(FileName)')" />
      <_netCoreAppSdkUnwantedRefNormalized Remove="@(NetCoreReference)"  />
    </ItemGroup>

    <!-- Convert the Identity metadata of _netCoreAppSdkUnwantedRefNormalized back to it's Original value -->
    <ItemGroup>
      <_netCoreAppSdkUnwantedRef Remove="@(_netCoreAppSdkUnwantedRef)" />
      <_netCoreAppSdkUnwantedRef Include="@(_netCoreAppSdkUnwantedRefNormalized->'%(OriginalItemSpec)')" />
    </ItemGroup>
    
    <!-- Reconstruct ReferencePath, but this time exclude the unwanted references out -->
    <ItemGroup>
      <ReferencePath 
        Include="@(_netCoreAppSdkReference)" 
        Exclude="@(_netCoreAppSdkUnwantedRef)"/>
    </ItemGroup>
  </Target>
  
  <Target
    Name="LimitWindowsDekstopAppReferences"
    AfterTargets="ResolveAssemblyReferences"
    Returns="@(ReferencePath)"
    Condition="'@(WindowsDesktopReference)'!='' and '@(ReferencePath)' != ''">
    <!-- 
      Example
      <WindowsDesktopReference Include="PresentationCore" /> 
    -->

    <!-- Save Microsoft.WindowsDesktop.App assemblies, and remove those from @(ReferencePath) -->
    <ItemGroup>
      <_windowsDesktopAppSdkReference Remove="@(_windowsDesktopAppSdkReference)" />
      <_windowsDesktopAppSdkReference Include="@(ReferencePath)" Condition="'%(ReferencePath.NuGetPackageId)'=='Microsoft.WindowsDesktop.App'"/>

      <ReferencePath Remove="@(_windowsDesktopAppSdkReference)" />
    </ItemGroup>

    <!-- Transform _windowsDesktopAppSdkReference's Identity to its FileName. This will help us do a Remove against @(NetCoreReference) directly -->
    <ItemGroup>
      <_windowsDesktopAppSdkUnwantedRefNormalized Remove="@(_windowsDesktopAppSdkUnwantedRefNormalized)" />
      <_windowsDesktopAppSdkUnwantedRefNormalized Include="@(_windowsDesktopAppSdkReference->'%(FileName)')" />
      <_windowsDesktopAppSdkUnwantedRefNormalized Remove="@(WindowsDesktopReference)"  />
    </ItemGroup>

    <!-- Convert the Identity metadata of _windowsDesktopAppSdkUnwantedRefNormalized back to it's Original value -->
    <ItemGroup>
      <_windowsDesktopAppSdkUnwantedRef Remove="@(_windowsDesktopAppSdkUnwantedRef)" />
      <_windowsDesktopAppSdkUnwantedRef Include="@(_windowsDesktopAppSdkUnwantedRefNormalized->'%(OriginalItemSpec)')" />
    </ItemGroup>

    <!-- Reconstruct ReferencePath, but this time exclude the unwanted references out -->
    <ItemGroup>
      <ReferencePath
        Include="@(_windowsDesktopAppSdkReference)"
        Exclude="@(_windowsDesktopAppSdkUnwantedRef)"/>
    </ItemGroup>
  </Target>

  <Target
    Name="LimitMicrosoftDotNetWpfGitHubReferences"
    AfterTargets="ResolveAssemblyReferences"
    Returns="@(ReferencePath)"
    Condition="'@(MicrosoftDotNetWpfGitHubReference)'!='' and '@(ReferencePath)' != '' and '$(DoNotLimitMicrosoftDotNetWpfGitHubReferences)'!='true'">
    <!-- 
      This target is called by WpfProjectReference.targets and should not be invoked directly
      Example
      <MicrosoftDotNetWpfGitHubReference Include="System.Xaml" /> 
    -->

    <!-- Save Microsoft.DotNet.Wpf.GitHub assemblies, and remove those from @(ReferencePath) -->
    <ItemGroup>
      <_microsoftDotNetWpfGithubRef Remove="@(_microsoftDotNetWpfGithubRef)" />
      <_microsoftDotNetWpfGithubRef Include="@(ReferencePath)" Condition="'%(ReferencePath.NuGetPackageId)'=='Microsoft.DotNet.Wpf.Github'"/>

      <ReferencePath Remove="@(_microsoftDotNetWpfGithubRef)" />
    </ItemGroup>

    <!-- Transform _microsoftDotNetWpfGithubRef's Identity to its FileName. This will help us do a Remove against @(MicrosoftDotNetWpfGitHubReference) directly -->
    <ItemGroup>
      <_microsoftDotNetWpfGithubUnwantedReferenceNormalized Remove="@(_microsoftDotNetWpfGithubUnwantedReferenceNormalized)" />
      <_microsoftDotNetWpfGithubUnwantedReferenceNormalized Include="@(_microsoftDotNetWpfGithubRef->'%(FileName)')" />
      <_microsoftDotNetWpfGithubUnwantedReferenceNormalized Remove="@(MicrosoftDotNetWpfGitHubReference)"  />
      <_microsoftDotNetWpfGithubUnwantedReferenceNormalized Include="@(MicrosoftDotNetWpfGitHubReference)"
                                                            Condition="'%(MicrosoftDotNetWpfGitHubReference.ReferenceOutputAssembly)'=='false'" />
    </ItemGroup>

    <!-- Convert the Identity metadata of _microsoftDotNetWpfGithubUnwantedReferenceNormalized back to it's Original value -->
    <ItemGroup>
      <_microsoftDotNetWpfGithubUnwantedRef Remove="@(_microsoftDotNetWpfGithubUnwantedRef)" />
      <_microsoftDotNetWpfGithubUnwantedRef Include="@(_microsoftDotNetWpfGithubUnwantedReferenceNormalized->'%(OriginalItemSpec)')" />
    </ItemGroup>

    <!-- Reconstruct ReferencePath, but this time exclude the unwanted references out -->
    <ItemGroup>
      <ReferencePath
        Include="@(_microsoftDotNetWpfGithubRef)"
        Exclude="@(_microsoftDotNetWpfGithubUnwantedRef)" />
    </ItemGroup>

    <!-- 
      If any items in @(MicrosoftDotNetWpfGitHubReference) have OutputItemType and Define metadata, then
      produce another itemgroup based on that
    -->
    <!-- First, merge the metadata for the items we want from _microsoftDotNetWpfGithubRef -->
    <FilterItem1ByItem2 Item1="@(MicrosoftDotNetWpfGitHubReference)"
                        PreserveItem1Metadata="true"
                        Item2="@(_microsoftDotNetWpfGithubRef->'%(FileName)')"
                        PreserveItem2Metadata="true"
                        Metadata2="Identity">
      <Output ItemName="_microsoftDotNetWpfGithubRefNormalized" TaskParameter="Result" />
    </FilterItem1ByItem2>

    <CreateItem Include="@(_microsoftDotNetWpfGithubRefNormalized->'%(HintPath)')"
                PreserveExistingMetadata="true"
                Condition="'%(_microsoftDotNetWpfGithubRefNormalized.OutputItemType)'!=''">
      <Output TaskParameter="Include" ItemName="%(_microsoftDotNetWpfGithubRefNormalized.OutputItemType)" />
    </CreateItem>
  </Target>

  <PropertyGroup>
    <ResolveAssemblyReferencesDependsOn>
      ResolveWinFormsReferences;
      $(ResolveAssemblyReferencesDependsOn)
    </ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>

  <!-- 
    In your project, Add a references to WinForms transport package like this:
      <ItemGroup>
        <MicrosoftPrivateWinFormsReference Include="Accessbility" />
      </ItemGroup>
      
    It will get translated into something like this:
      <ItemGroup>
        <Reference Include="C:\Users\username\.nuget\packages\microsoft.private.winforms\4.8.0-preview4.19170.4\lib\netcoreapp3.0\Accessibility.dll" />
      </ItemGroup>
  -->
  <Target Name="ResolveWinFormsReferences"
          Condition="'@(MicrosoftPrivateWinFormsReference)'!='' And $(TargetFramework.StartsWith('netcoreapp3'))">
    <ItemGroup>
      <Reference Include="$(PkgMicrosoft_Private_Winforms)\lib\$(TargetFramework)\%(MicrosoftPrivateWinFormsReference.Identity).dll" />
    </ItemGroup>
  </Target>
</Project>
